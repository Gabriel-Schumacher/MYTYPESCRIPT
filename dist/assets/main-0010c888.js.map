{"version":3,"file":"main-0010c888.js","sources":["../../src/basicTypes.ts","../../src/index.ts"],"sourcesContent":["export const functionParamsExample = () => {\r\n\r\n    return {\r\n      title: `Data types can be set on function parameters`,\r\n      explanation: `This is the syntax when indicating the data type of a function parameter. After the parameter name add a colon (:), a space and then the data type you expect. Be sure to use the primitive data types! (e.g. 'number' instead of 'Number')`,\r\n      code: `<pre data-prefix=\"1\"><code>function add(num1; number, num2: number) {</code></pre>\r\n\r\n        <pre data-prefix=\"2\"><code>  return num1 + num2</code></pre> \r\n        <pre data-prefix=\"3\"><code>}</code></pre>`\r\n    }\r\n\r\n}\r\n\r\nexport const objectTypesExample = () => {\r\n  return {\r\n    title: `Object data type with all properties set`,\r\n    explanation: `TypeScript can infer the data type of an object if all properties are set, but this example shows how to explicitly set the types of each property.`,\r\n    code:`<pre data-prefix=\"1\"><code> enum Role {ADMIN, DEV, STUDENT}</code></pre>\r\n          <pre data-prefix=\"2\"><code></code></pre>\r\n          <pre data-prefix=\"3\"><code>const sportsCar: {</code></pre>\r\n          <pre data-prefix=\"4\"><code> make: string</code></pre>\r\n          <pre data-prefix=\"5\"><code> model: string</code></pre>\r\n          <pre data-prefix=\"6\"><code> horsepower: number</code></pre>\r\n          <pre data-prefix=\"7\"><code> stype: string</code></pre>\r\n          <pre data-prefix=\"8\"><code> isFast: boolean</code></pre>\r\n          <pre data-prefix=\"9\"><code> colors: string</code></pre>\r\n          <pre data-prefix=\"10\"><code> driver: [number, string]</code></pre>\r\n          <pre data-prefix=\"11\"><code> role: Role</code></pre>\r\n          <pre data-prefix=\"12\"><code> } = </code></pre>\r\n          <pre data-prefix=\"13\"><code> make: 'McLaren',</code></pre>\r\n          <pre data-prefix=\"14\"><code> model: '720s',</code></pre>\r\n          <pre data-prefix=\"15\"><code> horsepower: 720,</code></pre>\r\n          <pre data-prefix=\"16\"><code> style: 'coupe',</code></pre>\r\n          <pre data-prefix=\"17\"><code> isFast: true,</code></pre>\r\n          <pre data-prefix=\"18\"><code> colors: ['red', 'blue', 'silver']</code></pre>\r\n          <pre data-prefix=\"19\"><code> driver: [1, 'McLaren']</code></pre>\r\n          <pre data-prefix=\"20\"><code> role: Role.ADMIN,</code></pre>\r\n          <pre data-prefix=\"21\"><code> }</code></pre> `\r\n  }\r\n}\r\n\r\n//console.log(JSON.stringify(functionParamsExample()), JSON.stringify(objectTypesExample()) )\r\n\r\nexport const functionReturnTypesExample = () => {\r\n  return {\r\n    title: `Typescript will infer types`,\r\n    explanation: `This function has the return type, which can be inferred by typescript. The value of the return type can be assigned by adding a colon (:) and the type after.`,\r\n    code:`<pre data-prefix=\"1\">Infer the return type</code></pre>\r\n    <pre data-prefix=\"1\">function add1(n1: number, n2: number) {</code></pre>\r\n    <pre data-prefix=\"2\">  return n1 + n2</code></pre>\r\n    <pre data-prefix=\"3\">}</code></pre>\r\n    <pre data-prefix=\"4\"><code> <!--Space--> </code></pre>\r\n    <pre data-prefix=\"5\">function add2(n1: number, n2: number) {</code></pre>\r\n    <pre data-prefix=\"6\">  return n1.toString() + n2.toString()</code></pre>\r\n    <pre data-prefix=\"7\">}</code></pre>\r\n    <pre data-prefix=\"8\"><code> <!--Space--> </code></pre>\r\n    <pre data-prefix=\"9\"><code>//Assign the return type </code></pre>\r\n    <pre data-prefix=\"10\">function add1(n1: number, n2: number): number {</code></pre>\r\n    <pre data-prefix=\"11\">  return n1 + n2</code></pre>\r\n    <pre data-prefix=\"12\">}</code></pre>`\r\n\r\n  }\r\n}\r\n\r\nexport const functionAsTypesExample = () => {\r\n  return {\r\n    title: `Types that describe a function, regarding the parameters and value of the function.`,\r\n    explanation: `A function type is create with arrow notion () => with the return type specified after. Inside the function you add parameters for the types used.`,\r\n    code:`<pre data-prefix=\"1\"><code>//Example Function</code></pre>\r\n    <pre data-prefix=\"2\"><code>function add(num1: number, num2: number) {</code></pre>\r\n    <pre data-prefix=\"3\"><code>   return num1 + num2;</code></pre>\r\n    <pre data-prefix=\"4\"><code>}</code></pre>\r\n    <pre data-prefix=\"5\"><code><!--Space--></code></pre>\r\n    <pre data-prefix=\"6\"><code>//Function as Type:</code></pre>\r\n    <pre data-prefix=\"7\"><code>let combineValues: (a:number, b:number) => number</code></pre>\r\n    <pre data-prefix=\"8\"><code><!--Space--></code></pre>\r\n    <pre data-prefix=\"9\"><code>combineValues = add</code></pre>\r\n    <pre data-prefix=\"10\"><code>console.log(combineValues(8, 8))</code></pre>`\r\n\r\n  }\r\n}\r\n\r\nexport const arrayTupleEnumExample = () => {\r\n  return {\r\n    title: `Different value types.`,\r\n    explanation: `Arrays, Tuples and Enums are all different ways to store data.`,\r\n    code:`<pre data-prefix=\"1\">//Arrays stores multiple values, which can be different.</code></pre> \r\n      <pre data-prefix=\"2\"><!-- Space --></code></pre>\r\n      <pre data-prefix=\"3\">const person1 = {</code></pre>\r\n      <pre data-prefix=\"4\">name: 'Gabriel',</code></pre>\r\n      <pre data-prefix=\"5\">age: 24,</code></pre>\r\n      <pre data-prefix=\"6\">hobbies: ['Coding', 'Cooking'], //Array data</code></pre>\r\n      <pre data-prefix=\"7\">}</code></pre>\r\n      <pre data-prefix=\"8\"> <!-- Space --></code></pre>\r\n      <pre data-prefix=\"9\">//A Tuple is fixed lengthed array, with fixed types.</code></pre>\r\n      <pre data-prefix=\"10\"><!-- Space --></code></pre>\r\n      <pre data-prefix=\"11\">const person2: {</code></pre>\r\n      <pre data-prefix=\"12\"> name: string;</code></pre>\r\n      <pre data-prefix=\"13\">age: number;</code></pre>\r\n      <pre data-prefix=\"14\">hobbies: string[];</code></pre>\r\n      <pre data-prefix=\"15\">role: [number, string]; //Assigning tuple parameters</code></pre>\r\n      <pre data-prefix=\"16\">} = {</code></pre>\r\n      <pre data-prefix=\"17\"> name: 'Gabriel',</code></pre>\r\n      <pre data-prefix=\"18\">age: 24,</code></pre>\r\n      <pre data-prefix=\"19\">hobbies: ['Coding', 'Cooking'],</code></pre>\r\n      <pre data-prefix=\"20\">role: [2, 'author']</code></pre>\r\n      <pre data-prefix=\"21\">}</code></pre>\r\n      <pre data-prefix=\"22\"><!-- Space --></code></pre>\r\n      <pre data-prefix=\"23\">//Enums allow the definition of set of named global constants</code></pre>\r\n      <pre data-prefix=\"24\"><!-- Space --></code></pre>\r\n      <pre data-prefix=\"25\">enum Role { ADMIN, READ_ONLY, AUTHOR }</code></pre>\r\n      <pre data-prefix=\"26\"><!-- Space --></code></pre>\r\n      <pre data-prefix=\"27\">const person3 = {</code></pre>\r\n      <pre data-prefix=\"28\">name: 'Gabriel',</code></pre>\r\n      <pre data-prefix=\"29\">age: 24,</code></pre>\r\n      <pre data-prefix=\"30\">hobbies: ['Coding', 'Cooking'],</code></pre>\r\n      <pre data-prefix=\"31\">role: Role.ADMIN //Using the enum type</code></pre>\r\n      <pre data-prefix=\"32\">}</code></pre>`\r\n\r\n  }\r\n}\r\n\r\nexport const unionLiteralExample = () => {\r\n  return {\r\n    title: `Values with more than a single type`,\r\n    explanation: `A union type describes a value that can be one of several types. We use the pipe ( | ) to separate each type, so number | string | boolean is the type of a value that can be a number , a string , or a boolean.  By using literal types you can allow an exact value which a string, number, or boolean must have.`,\r\n    code:`<pre data-prefix=\"1\"><code>//Union Type</code></pre>\r\n          <pre data-prefix=\"2\"><code>function combine(input1: number | string, input2: number | string) { </code></pre>\r\n          <pre data-prefix=\"3\"><code> let result </code></pre>\r\n          <pre data-prefix=\"4\"><code> if (typeof input1 === 'number' && typeof input2 === 'number') { </code></pre>\r\n          <pre data-prefix=\"5\"><code>    result = input1 + input2 </code></pre>\r\n          <pre data-prefix=\"6\"><code> } else { </code></pre>\r\n          <pre data-prefix=\"7\"><code>    result = input1.toString() + input2.toString()</code></pre>\r\n          <pre data-prefix=\"8\"><code> } </code></pre>\r\n          <pre data-prefix=\"9\"><code> return result</code></pre>\r\n          <pre data-prefix=\"10\"><code>} </code></pre>\r\n\r\n          <pre data-prefix=\"11\"><code> </code></pre>\r\n          <pre data-prefix=\"12\"><code>//Literal Type</code></pre>\r\n          <pre data-prefix=\"13\"><code>function combine2(input1: number | string,</code></pre>\r\n          <pre data-prefix=\"14\"><code>   input2: number | string, resultConversion: 'as-number' | 'as-text') {</code></pre>\r\n          <pre data-prefix=\"15\"><code>  let result</code></pre>\r\n          <pre data-prefix=\"16\"><code>  if (typeof input1 === 'number' && typeof input2 === 'number' ||</code></pre>\r\n          <pre data-prefix=\"17\"><code>  resultConversion === 'as-number') {</code></pre>\r\n          <pre data-prefix=\"18\"><code>    result = +input1 + +input2</code></pre>\r\n          <pre data-prefix=\"19\"><code>  } else {</code></pre>\r\n          <pre data-prefix=\"20\"><code>    result = input1.toString() + input2.toString()</code></pre>\r\n          <pre data-prefix=\"21\"><code>  }</code></pre>\r\n          <pre data-prefix=\"22\"><code>  return result</code></pre>\r\n          <pre data-prefix=\"23\"><code>}</code></pre>`\r\n          \r\n  }\r\n}\r\n\r\nexport const functionTypesExample = () => {\r\n  return {\r\n    title: `Function types have parameters and a return type.`,\r\n    explanation: `In this example the function paremeters accept two numbers. It is also set to return a number by using a colon (:) then stating the return type.`,\r\n    code:`<pre data-prefix=\"1\"><code>function addAndHandle(n1: number, n2: number): number {</code></pre>\r\n          <pre data-prefix=\"2\">return n1 + n2</code></pre>\r\n          <pre data-prefix=\"3\">}</code></pre>`\r\n  }\r\n}\r\n\r\n// a parameter is a variable passed into a function\r\n\r\n\r\n//const numberOne = 29;\r\n//const numberTwo = 3.5;\r\n\r\n// an argument i sa value (primitive or object) passed as an input\r\n\r\n//let result = add(numberOne, numberTwo);\r\n//console.log(result);\r\n\r\n//enum Role {ADMIN, DEV, STUDENT}\r\n\r\nconst sportsCar: { \r\n    make: string; \r\n    model: string;\r\n    horsepower: number;\r\n    style: string;\r\n    isFast: boolean;\r\n    colors: string[];\r\n    driver: [1, string];\r\n    //role: Role;\r\n} = {\r\n  make: \"McLaren\",\r\n  model: \"720s\",\r\n  horsepower: 720,\r\n  style: \"coupe\",\r\n  isFast: true,\r\n  colors: ['red', 'blue', 'silver'],\r\n  driver: [1, \"McLaren\"],\r\n  //role: Role.ADMIN\r\n};\r\n\r\nconsole.log(sportsCar)\r\n\r\n// Example of Function Return Types\r\n\r\nfunction add1(n1: number, n2: number) {\r\n  return n1 + n2\r\n}\r\n\r\nfunction add2(n1: number, n2: number) {\r\n  return n1.toString() + n2.toString()\r\n}\r\n\r\nfunction add3(n1: number, n2: number): number {\r\n  return n1 + n2\r\n}\r\n\r\nconsole.log(add1)\r\nconsole.log(add2)\r\nconsole.log(add3)\r\n// Example of Function As Types\r\n//Types that describe a function, regarding the parameters and value of the function.\r\n//A function type is create with arrow notion () => with the return type specified after. Inside the function you add parameters for the types used.\r\n\r\n//Example Function\r\nfunction add(num1: number, num2: number) {\r\n  return num1 + num2;\r\n}\r\n\r\n//Function as Type:\r\nlet combineValues: (a:number, b:number) => number\r\n\r\ncombineValues = add\r\nconsole.log(combineValues(8, 8))\r\n\r\n// Example of Array Tuple and Enum Types\r\n\r\n//Array \r\nconst person1 = {\r\n  name: 'Gabriel',\r\n  age: 24,\r\n  hobbies: ['Coding', 'Cooking'],\r\n}\r\n\r\n//Tuple A fixed lengthed, and fixed typed array.\r\n\r\nconst person2: {\r\n  name: string;\r\n  age: number;\r\n  hobbies: string[];\r\n  role: [number, string]; //assigning tuple parameters\r\n} = {\r\n  name: 'Gabriel',\r\n  age: 24,\r\n  hobbies: ['Coding', 'Cooking'],\r\n  role: [2, 'author']\r\n}\r\n\r\n//Enum using human readable values to store global number values\r\nenum Role { ADMIN, READ_ONLY, AUTHOR }\r\n\r\nconst person3 = {\r\n  name: 'Gabriel',\r\n  age: 24,\r\n  hobbies: ['Coding', 'Cooking'],\r\n  role: Role.ADMIN\r\n}\r\n\r\nconsole.log(person1)\r\nconsole.log(person2)\r\nconsole.log(person3)\r\n// Example of Union Types\r\n\r\nfunction combine(input1: number | string, input2: number | string) {\r\n  let result\r\n  if (typeof input1 === 'number' && typeof input2 === 'number') {\r\n    result = input1 + input2\r\n  } else {\r\n    result = input1.toString() + input2.toString()\r\n  }\r\n  return result\r\n}\r\n\r\nconst combinedAges = combine(30, 26)\r\nconsole.log(combinedAges)\r\n\r\nconst combinedNames = combine('Gabriel', 'Schumacher')\r\nconsole.log(combinedNames)\r\n\r\n// Example of typescript literal types\r\n\r\nfunction combine2(input1: number | string, input2: number | string, resultConversion: 'as-number' | 'as-text') {\r\n  let result\r\n  if (typeof input1 === 'number' && typeof input2 === 'number' ||\r\n  resultConversion === 'as-number') {\r\n    result = +input1 + +input2\r\n  } else {\r\n    result = input1.toString() + input2.toString()\r\n  }\r\n  return result\r\n}\r\n\r\nconsole.log(combine2(25, 3.5, 'as-number'))\r\nconsole.log(combine2('25', '3.5', 'as-number'))\r\nconsole.log(combine2('25', '3.5', 'as-text'))\r\n\r\n//Example of Function Types\r\n//Function types have parameters and a return type.\r\n//In this example the function paremeters accept two numbers. It is also set to return a number by using a colon (:) then stating the return type.\r\n\r\nfunction addAndHandle(n1: number, n2: number): number {\r\n  return n1 + n2\r\n}\r\n\r\nconsole.log(addAndHandle)\r\n","import { functionParamsExample } from \"./basicTypes\"\r\nimport { objectTypesExample } from \"./basicTypes\"\r\nimport { functionReturnTypesExample } from \"./basicTypes\"\r\nimport { functionAsTypesExample } from \"./basicTypes\"\r\nimport { arrayTupleEnumExample } from \"./basicTypes\"\r\nimport { unionLiteralExample } from \"./basicTypes\"\r\nimport { functionTypesExample } from \"./basicTypes\"\r\n\r\nconst funcParamsButton = document.querySelector('#funcParams')!\r\nconst objectTypesButton = document.querySelector('#objectTypes')!\r\nconst funcReturnButton  = document.querySelector('#funcReturnTypes')!\r\nconst funcAsTypesButton  = document.querySelector('#funcAsType')!\r\nconst arrayTupleEnumButton = document.querySelector('#ArrayTupleEnum')!\r\nconst unionLiteralButton = document.querySelector('#UnionLiteral')!\r\nconst funcTypeButton = document.querySelector('#funcType')!\r\n\r\n\r\n//const codeExample = document.querySelector('#code-example')!\r\nconst cardTitle = document.querySelector('.card-title')!\r\nconst cardContent = document.querySelector('#card-content')!\r\nconst codeContent = document.querySelector('#code-content')!\r\n\r\nfuncParamsButton.addEventListener('click', loadExample.bind(null, functionParamsExample))\r\nobjectTypesButton.addEventListener('click', loadExample.bind(null, objectTypesExample))\r\nfuncReturnButton.addEventListener('click', loadExample.bind(null, functionReturnTypesExample))\r\nfuncAsTypesButton.addEventListener('click', loadExample.bind(null, functionAsTypesExample))\r\narrayTupleEnumButton.addEventListener('click', loadExample.bind(null, arrayTupleEnumExample))\r\nunionLiteralButton.addEventListener('click', loadExample.bind(null, unionLiteralExample))\r\nfuncTypeButton.addEventListener('click', loadExample.bind(null, functionTypesExample))\r\n\r\n\r\n//function showFuncParamsExample() {\r\n  //  const { title, explanation, code } = functionParamsExample()\r\n  //  cardTitle.textContent = title \r\n  //  cardContent.textContent = explanation\r\n  //  codeContent.innerHTML = code\r\n//}\r\n\r\n//function showObjectTypesExample() {\r\n  //  const { title, explanation, code } = objectTypesExample()\r\n  //  cardTitle.textContent = title \r\n  //  cardContent.textContent = explanation\r\n //   codeContent.innerHTML = code\r\n//}\r\n\r\nfunction loadExample(functionExample: () =>  { title: string, \r\n    explanation: string, code: string }) {\r\n    const { title, explanation, code } = functionExample()\r\n    cardTitle.textContent = title \r\n    cardContent.textContent = explanation\r\n    codeContent.innerHTML = code\r\n}"],"names":["functionParamsExample","objectTypesExample","functionReturnTypesExample","functionAsTypesExample","arrayTupleEnumExample","unionLiteralExample","functionTypesExample","sportsCar","add1","n1","n2","add2","add3","add","num1","num2","combineValues","person1","person2","person3","combine","input1","input2","result","combinedAges","combinedNames","combine2","resultConversion","addAndHandle","funcParamsButton","objectTypesButton","funcReturnButton","funcAsTypesButton","arrayTupleEnumButton","unionLiteralButton","funcTypeButton","cardTitle","cardContent","codeContent","loadExample","functionExample","title","explanation","code"],"mappings":"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"}